创建和销毁对象

1、考虑用静态工厂方法代替构造器
  优点：
    a.方法可以有不同名称
    b.不用每次调用都创建一个对象
    c.可以返回原返回类型的任何子类型
    d.创建参数化实例时更简洁
  缺点：
    a.类如果不含public或protected的构造器，不能被子类化
    b.和其他的静态方法实际上没有区别

2、遇到多个构造器参数时要考虑用构建器
    重叠构造器可行，但参数多的时候会很复杂
    javabeans：用setter方法设置参数，状态不确定
    Builder模式：先创建一个builder包含目标类的必需信息，然后set可选信息，最后创建一个目标对象
    
3、用私有构造器或者枚举类型强化Singleton属性
	Singleton指仅仅被实例一次的类
	实现：
		公有静态成员时final域
		通过静态工厂方法调用
		Enum singleton

4、通过私有构造器强化不可实例化的能力
	如java.lang.Math，java.util.Arrays，java.util.Collections等不需要实例的工具类，通过将构造器设为私有可以防止被实例化
	缺点：子类要先调用父类的构造器，所以子类也不能实例化

5、避免创建不必要的对象
	String s = "abc" 代替 String s = new String("abc")
	如果维护对象池的代价太高应该创建对象而不是重用
	
6、消除过期的对象引用
	过期引用obsolete reference：永远也不会再被解除的引用
	缓存：
		缓存之外有对某个项的键的引用，用WeakHashMap，当缓存中的项失效时会自动删除
		如果缓存项的生命周期不好判断，可以使用后台线程(Timer或ScheduledThreadPoolExecutor)或者在给缓存添加新条目的时候顺便清理
		监听器和其他回调，保存成WeakHashMap中的键
		
7、避免使用终结方法
	java的终结方法!=c++的析构方法
	缺点：
		不确定是否被执行
		不确定执行时间
		降低响应性
	应提供显示的终结方法来关闭资源，如FileInputStream、FileOutPutStream、Timer、java.sql.Connection
	终结方法的作用：
		当显示的终结方法没有被调用时，终结方法可以充当“安全网”
		回收本地对等体native peer，本地对等体是一个本地对象native object，普通对象通过本地方法委托给本地对象，当Java对等体被回收的时候，本地对等体不会被jvm回收，所以需要终结方法回收
	除了Object的类终结方法不会被自动调用，需要在终结方法调用超类的终结方法