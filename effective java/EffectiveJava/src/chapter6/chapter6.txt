枚举和注解

30、用enum代替int常量
	每当需要一组固定的常量时，应该使用枚举，如Planet.java, PayrollDay.java
	枚举的优势：易读、安全、功能强大
	
31、用实例域代替序数
	许多枚举天生就与一个单独的int值相关联，可以从ordinal方法返回这个值
	永远不要根据枚举的序数导出与它关联的值，而是要将它保存在一个实例域中
	ordinal()是用于像EnumSet和EnumMap这样的基于枚举的通用数据结构的
	
32、用EnumSet代替位域
	位域：int枚举模式，将2的不同倍数赋予每个常量
	EnumSet：实现了Set，用Enum作为容器的元素
	
33、用EnumMap代替序数索引
	使用序数作为数组索引，可能会有非法索引的产生
	
34、用接口模拟可伸缩的枚举
	枚举本身不可伸缩，可以使用接口来模拟可伸缩的枚举
	如果共享的功能比较多，可以将它封装在一个辅助类或者静态辅助方法中，来避免代码的重复
	
35、注解优先于命名模式
	命名模式：如Junit，一定要用test作为测试方法名称的开头，如果拼写错，不会导致错误，但也执行不了
		第二个缺点，无法确保它们只用于相应的程序上
		第三，没有提供将参数值和程序关联的方法
		
36、坚持使用Override注解
	在你想要覆盖超类声明的每个方法声明中使用Override注解。
	优点：可以防止大量的错误
	
37、用标记接口定义类型
	标记接口是没有包含方法声明的接口，而只是指明一个类实现了具有某种属性的接口。
	如Serialization和Cloneable
	标记接口有两点胜过标记注解
		1）标记接口定义的类型是由被标记类的实例实现的，标记注解没有定义这样的类型
		2）标记接口可以被更加精确地进行锁定