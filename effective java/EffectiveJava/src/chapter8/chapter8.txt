通用程序设计
	Java语言的具体细节，包括局部变量的处理、控制结构、类库的用法和各种数据类型的用法，以及反射和本地方法
	
45、将局部变量的作用于最小化
	c语言要求局部变量必须在一个代码块的开头定义，而Java可以在任何地方定义
	一般是在第一次使用的时候定义变量，而且声明应该包含一个初始化
	如果变量的作用于只在一个循环体中，应该用for而不是while
	使方法小而集中，防止两个不同的操作因为变量名相同而弄混，把不同的操作分开
	
46、for-each循环优先于传统的for循环
	两者性能相同，但是for-each更加简单，不易出错
	有三种情况无法使用for-each
		1）过滤：遍历集合，删除选定的元素
		2）转换：遍历集合，取代全部或部分的元素值
		3）平行迭代：并行地遍历多个集合
	
47、了解和使用类库
	通过使用标准类库，可以充分利用这些编写标准类库的专家的知识，以及在其他人的使用经验
	不必浪费时间为那些与工作不太相关的问题提供特别的解决方案
	类库的性能会越来越高
	可以使自己的代码融入主流，更易读、更易维护、更易被大多数的开发人员重用
	
48、如果需要精确的答案，请避免使用float和double
	使用BigDecimal来代替double
	
49、基本类型优先于装箱基本类型
	两者区别：
		基本类型只有值，装箱基本类型有与值不同的同一性
		基本类型只有功能完备的值，装箱还有null
		基本类型通常比装箱节省时间和空间
		
50、如果其他类型更合适，则尽量避免使用字符串
	不应该使用字符串的情形
		字符串不适合代替其他的值类型、枚举类型、聚集类型、能力表
		
51、当心字符串连接的性能
	+ 是把多个字符串合并成一个字符串的遍历途径
	连接n个字符串需要n的平方级的时间，所以当项目数量巨大，使用StringBuilder替代String
	
52、通过接口引用对象
	除非没有合适的接口来引用，都应该使用接口引用对象
	或者使用类层次结构的基类

53、接口优先于反射机制
	反射：通过程序来访问关于已装载的类的信息，给定一个Class实例，可以得到Constructor、Filed、Method
	反射的缺点：
		丧失了编译时类型检查的好处
		代码笨拙和冗长
		性能损失
	反射只是在设计时才用到，一般应用程序运行时不应该以反射方式访问对象
	复杂的应用程序如浏览器、对象监视器、代码分析工具、解释性的内嵌式系统
	
54、谨慎地使用本地方法
	Java Native Interface 允许Java应用程序调用本地方法
	本地方法是平台相关的，不是绝对安全的
	
55、谨慎地进行优化
	努力编写好的程序而不是快的程序
	
56、遵守普遍接受的命名惯例
	