泛型(Generic)

23、请不要在新代码中使用原生态类型
	声明中具有一个或者多个类型参数的类或者接口，就是泛型类或接口，统称为泛型
	原生态类型：如List
	参数化类型：如List<Object>
	无限制的通配符:"?"
	例外：在类文字中必须使用原生态类型，List.class而不是List<?>.class
		在使用instanceof操作时，只能使用<?>,或者原生态类型
		
24、消除非受检警告
	尽可能消除所有非受检警告
	如果无法消除警告，同时可以证明引起警告的代码是类型安全的，可以用@SuppressaWarnings("unchecked")注解来消除警告
	
25、列表优先于数组
	数组是具体化的，运行时才得到数组内元素的类型信息的，所以编译不会报错
	泛型是通过擦除来实现的，编译时强化它们的类型信息，并在运行时擦除
	数组和泛型不能混合使用
	
26、优先考虑泛型
	使用泛型比使用需要在客户端代码中进行转换的类型来得更加安全，也更加容易。
	有限制的类型参数：如类型参数列表<E extends Delayed>要求实际的类型是Delayed的子类型。
	
27、优先考虑泛型方法
	泛型方法的一个显著特性是，无需明确指定类型参数的值，可以根据方法参数中的类型来推导出
	Java1.6还没有实现构造方法上的类型推到，1.7实现了，这样泛型的构造方法得到简化
		如List<String> = new ArrayList<>();
	递归类型限制，类型参数和类型本身有关，形成递归，如:<T extends Comparable<T>>可以和自身比较的类
	
28、利用有限制通配符来提升API的灵活性
	<? extends E> E的某个子类型
	每个类型都是自身的子类型，即便它没有将自身扩展
	<? super E> E的某个超类型
	每个类型都是自身的超类型
	PECS：producer-extends，consumer-super
	
29、优先考虑类型安全的异构容器
	泛型常用于集合，如set和map，以及单元素的容器，如ThreadLocal和AtomicReference
	但是集合中只能有固定数目的类型参数，可以通过将类型参数放到键上而不是容器上来避开限制
		对于这种异构容器，用Class对象作为键，以这种方式使用的Class对象称为类型令牌。可以使用定制的键类型。