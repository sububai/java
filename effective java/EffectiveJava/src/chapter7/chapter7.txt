方法
	如何处理方法的参数和返回值，如何设计方法签名，如何为方法编写文档
	
38、检查参数的有效性
	如果传递无效的参数值给方法，这个方法在执行之前先对参数进行了检查，那么它很快就会失败，并且清楚地出现适当的异常
	对于公有的方法，要用Javadoc的@throws标签在文档中说明违反参数限制时会抛出的异常
	对于非拥有的方法，应该使用断言(assertion)来检查它们的参数
	
39、必要时进行保护性拷贝
	如果类具有从客户端得到或者返回到客户端的可变组件，类就必须保护性拷贝这些组件。
	如果拷贝的成本收到限制，并且类信任它的客户端不会不恰当地修改组建，就可以在文档中指明客户端的职责，以此来代替保护性拷贝
	对于参数类型可以被不信任方子类化的参数，请不要使用clone方法进行保护性拷贝
	
40、谨慎设计方法签名
	谨慎地选择方法的名称
	不要过于追求提供便利的方法
	避免过长的参数列表。目标是最多四个
		缩短过长的参数列表有三种方法：分解方法、创建辅助类、采用Builder模式
		参数类型优先使用接口而不是类
		
41、慎用重载
	重载方法的选择是静态的，被覆盖的方法的选择是动态的
	对于多个具有相同参数数目的方法来说，应该尽量避免重载方法
	可以使用采用不同的方法签名来代替重载，可以更好地使用，减少出错
	
42、慎用可变参数
	可变参数方法：variable arity method，通过先创建一个数组，数组的大小为在调用位置所传递的变量，然后将参数值传到数组中，最后将数组传递给方法
	
43、返回零长度的数组或者集合，而不是null
	牺牲部分性能，可以避免很多错误的使用
	返回的零长度数组可以是同一个，因为它是不可变的
	
44、为所有导出的API元素编写文档注释
	用Javadoc编写
	方法的文档注释应该简洁地描述出它和客户端之间的约定，除了专门为继承设计的类，约定应该说明做了什么，而不是如何实现的
		文档注释应该列举出这个方法的所有的前提条件和后置条件、副作用、线程安全性
	每个文档注释的第一句话成了该注释所属元素的概要描述