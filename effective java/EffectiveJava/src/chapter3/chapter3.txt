对所有对象都通用的方法
 	
 8、覆盖equals时请遵守通用约定
 以下情况不需要覆盖
 	类的每个实例本质上都是唯一的
 	不关心是否提供了“逻辑相等logic equality”的测试功能
 	超类已经覆盖了equals，从超类继承过来的行为对子类也是合适的
 	类是私有的或是包级私有的，可以确定它的equals方法永远不会被调用
 需要覆盖的类通常是“值类value class”，如Integer和Date，enum类型的值类不需要覆盖
 覆盖equals方法时的通用约定：
 	equals方法实现了等价关系(equivalence relation)
 	自反性reflexive，x非null,x.equals(x) == true
 	对称性symmetric，x,y非null,x.equals(y) == y.equals(x)
 	传递性transitive，x,y,z非null,如果x.equals(y) == true && y.equals(z) == true => x.equals(z) == true
 	一致性consistent，x,y非null,只要对象不发生改变，x.equals(y)的结果也不变
 	非null的引用值x，x.equals(null) == false
 里氏替换原则认为，一个类型的任何重要属性也适用于它的子类型，因此为该类编写的任何方法，在它的子类型中也会运行得很好
 扩展类和父类不能进行比较，否则可能会出现错误
 无论类是否时不可变的，都不要使equals方法依赖于不可靠的资源，如java.net.URL的equals方法依赖于URL中主机的IP地址的比较，
 	将一个主机名转变成IP地址可能需要联网，随着时间的推移，不确保产生相同的结果
 高质量equals诀窍：
 	使用==操作符检查参数是否是这个对象的引用
 	使用instanceof检查参数是否是正确的类型
 	把参数转化成正确的类型
 	对于该类的每个关键域，检查参数的域是否和该对象的域相等
 对于不是float或double类型的基本类型可以用==来比较，对于float可以用Float.compare，double可以用Double.compare
 	因为float的equals方法是将float转化成int来比较的，Float.NaN、-0.0f进行比较的时候会出现错误
 注意：
 	覆盖equals时总要覆盖hashCode
 	不要企图让equals过于智能
 	不要将equals声明中的Object对象替换成其他类型
 	
9、覆盖equals时总是要覆盖hashCode
	程序的执行期间，只要对象的equals方法的比较操作所用到的信息没有被修改，那么对这一个对象调用多次，hashCode放法必须返回同一个整数
	如果两个对象根据equals方法比较是相等的，那么两个对象的hashCode必须产生同样的结果
	如果两个对象根据equals方法比较是不相等的，那么两个对象的hashCode不一定会产生不同的结果。但是给不相等的对象产生截然不同的整数结果，有可能提高散列表的性能
 
 10、始终要覆盖toString
 	方便看到对象的信息
 	
 11、谨慎地覆盖clone
 	如果一个类实现了Cloneable，Object的clone方法就返回对象的逐域拷贝，否则抛出CloneNotSupportedException
 	1.5引入了协变返回类型(covariant return type)，重写clone时可以将返回类型该为本类的类型，这样客户就不用再转换
 	实现Cloneable接口的类都应该用一个公有的方法覆盖clone。此方法首先调用super.clone，然后修正任何需要修正的域。
 	如果一个为了继承而设计的类，没有提供一个好的受保护的clone方法，它的子类就不能实现Cloneable
 	
 12、考虑实现Comparable接口
 	有明显排序关系的类(如值类)都应该实现Comparable接口
 	Comparable接口只有一个CompareTo方法
 	CompareTo方法的通用约定：
 		将这个对象和指定对象比较。当该对象小于、等于或大于指定对象时返回一个负整数、零或者正整数，如果由于类型不同而无法比较时，抛出ClassCastException
 		sgn(x.compareTo(y)) == -sgn(y.compareTo(x))
 		x.compareTo(y)>0 && y.compareTo(z) => x.compareTo(z)>0
 		x.compareTo(y)==0 => sgn(x.compareTo(z)) == sgn(y.compareTo(z))
 		强烈建议(x.compareTo(y)==0) == (x.equals(y))