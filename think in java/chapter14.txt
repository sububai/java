多线程

1、进程和线程
  1.1、进程是运行的程序，有自己的地址空间。多任务操作系统可以同时运行多个进程(程序)，根据分时系统分配cpu
    线程是进程内部单一的顺序控制流，一个进程可以有多个线程

  1.2、“线程模型”（以及Java 中的编程支持）是一种程序编写规范，可在单独一个程序里实现几个操作的同时进行。
  根据这一机制，CPU 可为每个线程都分配自己的一部分时间。
  每个线程都“感觉”自己好象拥有整个CPU，但CPU 的计算时间实际却是在所有线程间分摊的。

  1.3、线程的实现
    继承Thread类，重写run()，新建此类的对象，调用start
    实现Runnable接口，重写run()，把此类的对象当成参数创建Thread对象，调用start

  1.4、守护进程(Daemon)
    在程序运行期间于后台提供一种服务的进程

2、共享有限的资源
  synchronized 方法，代码块

3、堵塞
  线程的状态：
    new：已创建，尚未启动
    runnable：如果被cpu调用可以立即运行
    dead：运行完run(),或者stop()，destroy()被调用
    blocked：可以运行，但是被某种东西阻碍。进入runnable状态才可以运行
  堵塞的原因
    调用sleep(),在规定时间内不可运行
    调用suspend()，收到resume()之前不可运行
    调用wait(),收到notify或notifyAll()之前不可运行
    等待一些IO操作完成
    线程调用另一个对象的同步方法，但那个对象处于锁定状态

  为了减少死锁的可能，Java1.2不支持使用stop，suspend，resume，destroy
