Java内存模型

1、内存模型
	在共享内存的多处理器体系架构中，每个处理器都拥有自己的缓存，定期地与主内存进行协调
	重排序会打乱操作的顺序
	Java内存模型是通过各种操作定义的，包括对变量的读写，监视器的加锁和释放，以及线程的启动和合并。
	JVM有一个偏序关系，Happens-Before
		程序顺序规则：如果程序中操作A在操作B之前，那么线程中A操作会在B操作之前执行。
		监视器锁规则：在监视器锁上的解锁操作必须在同一个监视器锁的加锁操作之前执行
		volatile变量规则：对volatile变量的写入操作必须在对该变量的读操作之前执行
		线程启动规则：在线程上对Thread.Start的调用必须在该线程中执行其他操作之前执行
		线程结束规则：线程中的任何操作都必须在其他线程检测到该线程已结束之前执行，或者从Thread.join中成功返回，或者在调用Thread.isAlive时返回false
		中断规则：当一个线程在另一个线程上调用interrupt时，必须在被中断线程检测到interrupt调用之前执行
		终结器规则：对象的构造函数必须在启动该对象的终结器之前执行完成。
		传递性：如果操作A在操作B之前执行，操作B在操作C之前执行，那么操作A在操作C之前执行
	借助同步：FutureTask，对语句的顺序非常敏感，容易出错
	
2、发布
	不安全的发布：缺少Happens-Before关系
	安全的发布
	安全初始化模式：提前初始化
	双重检查加锁
	
3、初始化过程中的安全性
	