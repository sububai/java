性能和可伸缩性
线程的最主要的目的是提高程序的运行性能，但是性能提高会导致活跃性危险和更加复杂的结构
1、性能：用更少的资源做更多的事情
	资源包括cpu时钟周期、内存、网络带宽、I/O带宽、数据库请求、磁盘空间和其他医院等
	可伸缩性：当增加计算资源时，程序的吞吐量或者处理能力或相应地增加。
	一般提升性能最简单的方法就是使cpu保持忙碌状态

2、Amdahl定律
	定义：当增加计算资源时，理论上能够实现最高加速比，这个值取决于程序中可并行组件与串行组件的比值
	加速比的最大值和程序中串行组件占的比例有关
	所有并发程序中都有串行部分

3、线程引入的开销
	单线程没有线程调度，也没有线程开销
	多线程开销的来源
		上下文切换
		内存同步
		阻塞
		
4、降低锁的竞争
	减少锁的持有时间
	降低锁的请求频率，如ConcurrentHashMap分为16个分段锁，每个锁控制1/16的容器
	使用带有协调机制的锁：如读写锁，原子变量(Atomic类型的数据)
	