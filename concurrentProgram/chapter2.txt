线程安全性

多个线程访问同一个可变的状态变量时没有使用合适的同步，会出现错误，修复方法
  不共享该状态变量
  状态变量修改为不可变
  访问时使用同步

1、线程安全性
  定义：当多个线程访问某个类时，这个类始终都能变现出正确的行为
  无状态对象一定会是线程安全的

2、原子性
  由于不恰当的执行时序而出现不正确的结果，叫竞态条件 Race Condition
  尽可能使用现有的线程安全类

3、加锁机制
  synchronized block：同步块
    对象引用：加锁的对象
    有锁保护的代码块
  3.1内置锁：每个Java对象都可以作为同步块中加锁的对象
  3.2、重入：某个线程可以在此请求对同一个锁的请求

性能和简单之间要找到一个平衡点

当执行较长时间的计算或者无法快速完成的操作是（如网络I/O或者控制台I/O），一定不要加锁
